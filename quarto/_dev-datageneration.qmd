```{r}
#| label: dev-datageneration
#| echo: false
#| message: false
#| warning: false

```
### General organization
All data generation happens in a private repository. The rationale for this project organization is based on several principles. First, `targets` [package](https://docs.ropensci.org/targets/index.html) is used for data genration, which requires a discrete data generation environment. Second, by separating data generation from code to serve the rest of the application, we are able to share more code, including our modular shiny app code, user authorization code, report generation code, and AWS integrations. Third, by keeping our data generation scripts private, we are able to share the results of our analyses sooner. Finally, our goal is to monetize this application, thereby supporting its future development. Private data generation (our special sauce) enables this possibility.  
  
### Targets
The data generation workflow leverages the `targets` [package](https://docs.ropensci.org/targets/index.html), which is a Make-like pipeline tool in R. With targets, we maintain a reproducible workflow without repeating data generation unnecessarily. `targets` monitors data dependencies, and skips costly runtime for tasks that are already up to date, orchestrates the necessary computation with implicit parallel computing, and abstracts files as R objects. An up-to-date targets pipeline provides tangible evidence that the output aligns with the code and data, which generates trust in our results.  
  
### Naming
All generated objects use the following naming conventions conventions.  
- **Fetched data**: Data fetched from URLs are updated with a  `update_x()` function, located in raw.R. These simply download the data and store them in the raw data container. The `update` function also has an argument called `last_update`, which is a character variable that takes a date. This is simply a way to both track the last time an object was updated, but also to trigger an `update_data()` event if the URL doesn't change. (targets monitors changes in arguments to trigger data updates) 
- **Raw data**: Data generated from function that saves data to the raw data container can be called whatever is appropriate/intuitive. Data generated from a function that saves data to the main data container must be prefixed with gene_, cell_, compound_, or universal_, in order for the` ddh::load_ddh_data` function to work. The way to call a data object as an argument is by feeding the function data_dataobjectname, and the default value is set in _targets.R, not in the main function.  
`newdataobject <- generate_newdataobject(data_dataobjectname = dataobjectname)`  
This convention makes naming the objects and keeping track of them easy.`
  
### Test data  
Test data are generated by creating a list of test ids (test genes, test cell lines, and test compounds). Then, each data_set is filtered for either rows or columns containing the list of test ids. 
```
test_data <-
      data_set %>%
      dplyr::ungroup() %>% #needed for grouped/nested dfs
      dplyr::filter(.[[1]] %in% data_all_test_ids) #filter in first column
```
A helper function in the ddh_data repository take the following arguments: `data_set, data_all_test_ids, row = TRUE, full_data = FALSE` to generate the test data for each dataset. Because of this, the id that `all_test_ids` looks within needs to be in the first column. If the dataset does not contain any id names, then calling `full_data = TRUE` escapes the filter and returns the full dataset.   
  