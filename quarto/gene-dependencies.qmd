---
params:
  type: "gene"
  subtype: "gene"
  query: "ROCK1"
  content: "ROCK1"
  private: "true"
knitr:
  opts_chunk: 
    cache.lazy: false #fixes "Error in lazyLoadDBinsertVariable; long vectors not supported yet"
---

{{< include _setup.qmd >}}
  
# Gene Dependencies {#sec-gene-dependencies}  
```{r}
#| echo: false
#| message: false


#get and load object from aws data
get_rds <- function(object_name){
  s3 <- paws::s3()
  object_value <- 
    s3$get_object(
      Bucket = Sys.getenv("AWS_DATA_BUCKET_ID"), 
      Key = object_name
    ) %>% 
    purrr::pluck("Body") %>% 
    rawConnection() %>% 
    gzcon %>% 
    readRDS
  return(object_value)
}

na_cutoff <- get_rds("na_cutoff.Rds")
mean_virtual_achilles <- get_rds("mean_virtual_achilles.Rds")
sd_virtual_achilles <- get_rds("sd_virtual_achilles.Rds")
achilles_lower <- get_rds("achilles_lower.Rds")
achilles_upper <- get_rds("achilles_upper.Rds")
sd_threshold <- get_rds("sd_threshold.Rds")

fraction_cutoff <- 0.05 #~5% FDR
```
## Rationale
Following on the idea of looking for patterns in data, we set out to map genes to common functional pathways based on functional genomic data. Functional genomics is a field of molecular biology that aims to understand the function of all genes and proteins in a genome -- a stated goal of much basic science research. In functional genomics, experimental strategies generally involve high-throughput, genome-wide approaches rather than a more traditional "gene-by-gene" approach.  

Project Achilles is a systematic effort by the [Broad Institute](https://www.broadinstitute.org) as part of a larger ['DepMap' project](http://www.depmap.org) aimed at identifying and cataloging gene essentiality across hundreds of well-characterized cancer cell lines using highly standardized pooled genome-scale loss-of-function screens. This project uses lentiviral-based pooled RNAi or CRISPR/Cas9 libraries to systematically knock-out each gene in the genome, which allows for the stable suppression/ablation of each gene individually in a subset of cells within a pooled format allowing for genome wide interrogation of gene essentiality. Using computational modeling, a normalized value of gene essentiality is given for each gene in a single cell line. A lower score means that a gene is more likely to be essential in a given cell line. A score of -1 corresponds to the median of all common essential genes, whereas a score of 0 is equivalent to a gene that is not essential; a positive score indicates a gain in fitness and often identifies tumor suppressor genes.

It is well-known that human cancer cell lines rely on different pathways for their viability. Indeed this is the entire rationale for personalized, precision medicine in cancer. The overall goal of the 'DepMap' project is to identify all essential genes in 2000 cell lines over the 5-year project period to identify new therapeutic targets in various cancers. Despite not knowing the mechanistic basis for why some cell lines require specific genes while other cell lines do not, we reasoned that intrinsic reliance of a cell on a pathway might allow unbiased detection of novel genes participating in specific pathways.

```{r}
#| label: cell-dependency-example
#| echo: false
#| message: false
#| warning: false

# Dummy data
x <- paste0("cell line ", seq(1,6))
y <- paste0("gene ", LETTERS[24])
y <- y %>% 
  c(paste0("gene ", LETTERS[1:6]))
data <- expand.grid(X=x, Y=y, stringsAsFactors = TRUE)

pos <- runif(100, 0.2, 1)
neg <- runif(100, -1, -0.2)

i <- 0
A <- NULL
while (i < 3) {
  a <- sample(pos, 3)
  a <- a %>% c(sample(neg,3))
  A <- c(A, a)
  i <- i + 1
}
j <- 0
B <- NULL
while (j < 4) {
  b <- sample(neg, 3)
  b <- b %>% c(sample(pos,3))
  B <- c(B, b)
  j <- j + 1
}

data$Z <- c(B,A)

# Heatmap 
ggplot(data, aes(X, fct_rev(Y), fill= Z)) + 
  geom_tile() +
  labs(x = "", y = "", fill = "Dependency \nCorrelation", subtitle = "Dependency Score Example*", caption = "*simulated data") +
  theme_ddh() + 
  scale_fill_ddh_c() + 
  scale_x_discrete(position = "top")

```

Essential gene data from Project Achilles were downloaded from the DepMap portal at: [depmap.org](https://depmap.org/portal/download/). This release contains gene essentiality scores for `r length(unique(achilles_long$gene))` genes across `r length(unique(achilles_long$X1))` cell lines, and was used for this project.

```{r}
#| label: dep_scores
#| echo: false
#| message: false
#| warning: false

#insert summary of scores
achilles_long %>% 
  filter(!is.na(dep_score)) %>% 
  ggplot() +
  geom_histogram(aes(x = dep_score), color = "gray", fill = "#02224C", binwidth = 0.1) +
  labs(x = "Dependency Score", 
       y = "Count", 
       subtitle = paste0("Dependency Score Distribution")) +
  scale_y_continuous(breaks = c(0, 1000000, 2000000, 3000000, 4000000, 5000000), labels = c("0", "1", "2", "3", "4", "5")) +
  scale_x_continuous(breaks = c(-5:7)) +
  theme_ddh()
```

## Dependency Plots {#sec-dependency-plots}
{{< include _gene-dependency.qmd >}}  

### Dependency Bar Plot

### Dependency Density Plot
{{< include _gene-dependency-density.qmd >}}  

### Dependency Lineage Plot
{{< include _gene-dependency-lineage.qmd >}} 

### Dependency Sublineage Plot
{{< include _gene-dependency-sublineage.qmd >}} 

### Dependency Table
{{< include _gene-dependency-table.qmd >}}  

### Expression vs. Dependency Plot
{{< include _gene-dependency-v-expression.qmd >}}  

## Co-essentiality {#sec-coessentiality}
To find patterns in gene dependencies across cell lines, we generated a Pearson correlation matrix of all genes by all genes. This analysis generated gene-gene correlation values that matched values published on [depmap.org](https://depmap.org), validating the first step in our analysis. High levels of gene expression are often thought to be indicative of key genes for a given cell type. Thus, we next compared dependency values to gene expression values. The [Cancer Cell Line Encyclopedia](https://portals.broadinstitute.org/ccle/about) project is a collaboration between the Broad Institute, and the Novartis Institutes for Biomedical Research and its Genomics Institute of the Novartis Research Foundation, which together conduct detailed genetic and pharmacologic characterization of a large panel of human cancer models. As of the most recent CCLE release, **r length(unique(expression_long$X1))** cell lines have been characterized for gene expression. In DepMap, **r sum(unique(expression_long$X1) %in% unique(achilles_long$X1))** of the **r length(unique(achilles_long$X1))** cell lines have gene expression data. Using these two datasets, we compared the essentiality of a gene to its expression value.  

```{r}
#| label: depVexp
#| echo: false
#| message: false
#| warning: false

log_breaks <- c(1, 10, 100, 1000, 10000, 100000, 1000000)
log_labels <-c("1", "10", "100", "1,000", "10,000", "100,000", "1,000,000")

expression_long %>% 
  dplyr::select(-protein_expression) %>% 
  dplyr::left_join(achilles_long, by = c("gene" = "gene", "X1" = "X1")) %>% 
  ggplot() +
  geom_hex(aes(x = dep_score, 
               y = gene_expression), 
           bins = 90, 
           na.rm = TRUE, 
           size = 0.2, 
           color = "black") +
  scale_fill_ddh_c(name = "Hex Bin \nCount", 
                   trans = "log10", 
                   breaks = log_breaks, 
                   labels = log_labels, 
                   limits = c(1,1000000)) + #log scale transform legend
  labs(x = "Dependency Score", 
       y = "Gene Expression", 
       subtitle = "Gene expression is unrelated to its essentiality") +  
  theme_ddh()

```

We predicted a V-shaped curve, with stronger dependencies as gene expression increases. Surprisingly, we saw no relationship between gene expression and gene essentiality, where genes with both low and high expression displayed both gains and losses in fitness. The overall observation from this dataset shows baseline gene expression levels are poor indicators of the essentiality of a gene. This analysis also highlighted that several genes were binned on the x-axis, i.e. could have no measurable expression levels, but have assigned dependency scores. Across `r length(unique(achilles_long$X1))` cell lines in the Achilles project, **r round(((expression_long %>% filter(gene_expression == 0) %>% count())/(length(expression_long$gene_expression))*100), digits = 1)**% of all gene expression values are zero, confirming this notion.

### Data Processing
Given cells do not express all genes, but might receive a dependency score in this experimental paradigm, we sought to remove dependency scores for gene-cell line pairs that have an expression value of zero under basal conditions. Of the **r length(unique(achilles_long$X1))** cell lines for which gene essentiality data is collected, **r sum(unique(achilles_long$X1) %in% unique(expression_long$X1))** have genome-wide gene expression data. From these cell lines, we removed dependency scores for genes from cell line that have a corresponding gene expression value of zero.  

```{r}
#| label: expression_0
#| echo: false
#| message: false
#| warning: false

#how many 0s?
ggplot() +
  geom_histogram(data = expression_long, aes(x = gene_expression), color = "gray", fill = "#02224C", binwidth = 0.25) +
  labs(title = paste("Binned gene expression values in ", sum(unique(achilles_long$X1) %in% unique(expression_long$X1)), " Achilles cell lines", sep = ""), 
       subtitle = paste0(
         round(((expression_long %>% filter(gene_expression == 0) %>% count())/(length(expression_long$gene_expression))*100), digits = 1), "% of all values are zero"), 
       x = "Gene expression (RPKM)", 
       y = "Count") +
  scale_y_continuous(breaks = seq(0, 3000000, by = 1000000), labels = c("0", "1", "2", "3")) +
  theme_ddh() +
  NULL

```

For some genes expressed in highly specific and restricted cell types, this operation removed many dependency values. After removing these values, we found that highly specialized genes in discrete cell types have too few cells with both gene expression values and gene essentiality values to assign a meaningful correlation value. Thus, if a gene was absent from too many cell lines, we omitted it to prevent assigned values from relying on too few data points.

```{r}
#| label: dep_0s
#| echo: false
#| message: false
#| warning: false

#gets rid of zeros by replacing with NAs
no_expression <- 
  expression_long %>% 
  dplyr::filter(gene_expression == 0) %>% 
  tidyr::unite(X1, gene, col = "match", sep = "-", remove = TRUE) %>% 
  dplyr::pull(match)

achilles_no0 <- 
  achilles_long %>% 
  tidyr::unite(X1, gene, col = "match", sep = "-", remove = FALSE) %>% 
  dplyr::filter(match %in% no_expression == FALSE) %>% 
  dplyr::select(-match) %>%
  tidyr::spread(gene, dep_score)

#count NAs in corrected dataframe
achilles_no0_plot <- 
  achilles_no0 %>% 
  dplyr::summarise_all(list(~sum(is.na(.)))) %>% 
  tidyr::gather(gene, NAs) %>% 
  dplyr::arrange(desc(NAs)) %>% 
  dplyr::mutate(pos = sum(unique(achilles_long$X1) %in% unique(expression_long$X1))-NAs)

#this is code to draw arrows graph labels
arrows <- tibble(
  x1 = c(sum(unique(achilles_long$X1) %in% unique(expression_long$X1))-na_cutoff, sum(unique(achilles_long$X1) %in% unique(expression_long$X1))-na_cutoff),
  x2 = c(375, 50),
  y1 = c(6000, 8000),
  y2 = c(2500, 5000)
)

threshold <- 
  ggplot(achilles_no0_plot) +
  geom_histogram(aes(x = pos), color = "gray", fill = "#02224C") +
  labs(x = "# of cell lines expressing target gene", y = "# of genes in bin", subtitle = "The number of cell lines each gene was present within") +
  geom_curve(data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
             arrow = arrow(length = unit(0.07, "inch")), 
             size = 0.4,
             color = "gray60", 
             curvature = .20) +
  annotate("text", x = 35, y = 3000, size = 4, color = "gray60",
           label = glue::glue("These genes \nhave too few \ncells with \nexpression")) +
  annotate("text", x = 600, y = 2500, size = 4, color = "gray60",
           label = glue::glue("These genes have several \ncell lines with expression")) +
  annotate("text", x = sum(unique(achilles_long$X1) %in% unique(expression_long$X1))-na_cutoff + 5, y = 12000, size = 3, color = "red", hjust = 0, fontface = "bold",
           label = glue::glue("Threshold")) +
  geom_vline(aes(xintercept = sum(unique(achilles_long$X1) %in% unique(expression_long$X1))-na_cutoff), color = "red") +
  theme_ddh()

#code below sets threshold to remove too many NAs from raw data without zeros
toomanyNAs <- 
  achilles_no0 %>% 
  dplyr::summarise_all(list(~sum(is.na(.)))) %>% 
  tidyr::gather(gene, NAs) %>% 
  dplyr::arrange(desc(NAs)) %>% 
  dplyr::filter(NAs > na_cutoff) %>% 
  dplyr::pull(gene)

achilles_clean <- 
  achilles_no0 %>% 
  dplyr::select(-one_of(toomanyNAs)) #this is now the same object as achilles, but different than achilles_raw; referenced below
#would be nice to list these omitted genes,

##relationship between number of cell lines that drive gene correlation and number of genes in list
count_v_max_no0 <- 
  achilles_no0 %>% 
  dplyr::select(-X1) %>% 
  corrr::correlate() %>% 
  tidyr::pivot_longer(-1, names_to = "genes_no0", values_to = "correlations_no0") %>% 
  dplyr::rename(rowname = 1) %>% 
  dplyr::filter(correlations_no0 > achilles_upper) %>%  #| achilles_correlation_raw < achilles_lower) %>% 
  dplyr::group_by(rowname) %>% 
  dplyr::summarize(count = n(), 
                   max = max(correlations_no0)) %>% 
  dplyr::left_join(achilles_no0_plot, by = c("rowname" = "gene")) %>% 
  dplyr::arrange(pos)

count_v_max_no0 %>% 
  ggplot() +
  geom_point(aes(x = pos, y = count), alpha = 0.2, color = "#02224C") +
  geom_vline(xintercept = nrow(achilles_clean) - na_cutoff, color = "red") +
  labs(y = "# of genes correlated w/ target", 
       x = "# of cell lines expressing target gene", 
       subtitle = "Sampling too few cells weakens predictions") +
  annotate("text", x = sum(unique(achilles_long$X1) %in% unique(expression_long$X1))-na_cutoff + 10, 
           y = 10, size = 3, color = "red", hjust = 0, fontface = "bold",
           label = glue::glue("Threshold")) +
  theme_ddh()

```

We set a threshold of no more than `r na_cutoff` zeros, meaning that if a gene had fewer than `r length(unique(achilles_long$X1))-na_cutoff` cell lines with dependency values, the correlation pattern of a gene would be meaningless, and that gene was therefore removed. This value was based on removing `r paste0(round(fraction_cutoff*100, 0), " %")` of the genes with the fewest number of cells deriving the correlation value and having the highest number of correlated gene patterns. This process removed `r length(toomanyNAs)` genes that had too few cells with expression and dependency data.

```{r raw, echo=FALSE, message=FALSE, warning=FALSE}
threshold
```

To quantify the effect of these cleaning step on the data, we compared the correlation matrix generated from the raw data to the correlation matrix from the cleaned data. Plotting these \~200M gene-gene pairs revealed that more positive genes became more positive compared positive genes that became negative; conversely, more gene pairs with negative correlations became more negative rather than less negative. Simply stated, these cleaning steps had a greater effect on strengthening the data in either direction rather than weakening it, supporting these steps as important for this resource. These 'cleaned' dependency data had `r length(achilles_clean)` remaining gene-dependency pairs, which were then used to generate correlation matrix.

```{r}
#| label: special_sauce
#| echo: false
#| message: false
#| warning: false
achilles_url <- "https://ndownloader.figshare.com/files/34989889"
achilles_raw <- 
  readr::read_csv(achilles_url, col_names = TRUE) %>%
  dplyr::rename_with(~ str_remove_all(., "\\s\\(\\d+\\)")) %>% 
  dplyr::rename(X1 = 1)
achilles_raw <- clean_colnames(achilles_raw)
achilles_cor_raw <- achilles_raw %>% 
  dplyr::select(-X1) %>% 
  corrr::correlate() 
#shave to reduce redundancies
achilles_cor_raw_shave <- shave(achilles_cor_raw)
#pivot both longer, but use shaved dataset to plot only one gene-gene pair
achilles_cor_raw_shave_long <- 
  achilles_cor_raw_shave %>% 
  dplyr::rename(rowname = 1) %>% 
  tidyr::pivot_longer(-rowname, names_to = "achilles_gene", values_to = "achilles_correlation_raw") %>% 
  dplyr::filter(!is.na(achilles_correlation_raw))
achilles_joined <- 
  achilles_cor_nest %>%
  tidyr::unnest(cols = c(data)) %>% 
  dplyr::filter(!is.na(r2)) %>% 
  dplyr::left_join((achilles_cor_raw_shave_long), by = c("fav_gene" = "rowname", "gene" = "achilles_gene"))
log_breaks10M <- c(1, 10, 100, 1000, 10000, 100000, 1000000, 10000000)
log_labels10M <-c("1", "10", "100", "1,000", "10,000", "100,000", "1,000,000", "10,000,000")
#effect_of_cleaning
achilles_joined %>% 
  #sample_n(1000000) %>% 
  ggplot() +
  geom_abline(intercept = 0, slope = 1, color = "gray") +
  geom_hline(yintercept = 0) +
  geom_vline(xintercept = 0) +
  geom_hex(aes(x = achilles_correlation_raw, y = r2), 
           bins = 90, na.rm = TRUE, size = 0.2, color = "black") +
  scale_fill_ddh_c(name = "Hex Bin \nCount", trans = "log10", breaks = log_breaks10M, labels = log_labels10M, limits = c(1,10000000)) + #breaks and labels defined above
  labs(x = "Raw Correlation", y = "Corrected Correlation", subtitle = "Effect of cleaning") +  
  coord_fixed(ratio = 1, xlim = c(-1, 1), ylim = c(-1, 1)) +
  theme_ddh()
```

### Positive Correlations

To identify genes that shared similar patterns of essentiality with other genes, thereby placing genes in functional pathways, we generated a gene-by-gene Pearson correlation matrix on these prioritized data to quantify the similarity in dependency patterns and annotate genes in functional pathways.

```{r}
#| label: r2
#| echo: false
#| message: false
#| warning: false

#r2
achilles_cor_nest %>%
  tidyr::unnest(cols = c(data)) %>% 
  dplyr::filter(!is.na(r2)) %>% 
  #sample_n(1000) %>% 
  ggplot() +
  geom_histogram(aes(x = r2), color = "gray", fill = "#02224C", binwidth = 0.05) +
  scale_y_continuous(breaks = c(0, 25000000, 50000000, 75000000), labels = c("0", "25", "50", "75")) +
  labs(x = "r^2 values", y = "Count (Million)", subtitle = "Distribution of correlation values across all gene-gene pairs") +
  theme_ddh()

```

This process generated approximately `r round(achilles_cor_nest %>% unnest(cols = c(data)) %>% nrow()/1000000, 0)` million correlation values, with a distribution centered around zero. This output produced a range of maximum correlation values for each gene.

```{r}
#| label: achilles_max
#| echo: false
#| message: false
#| warning: false

#achilles_max 
achilles_cor_nest %>%
  tidyr::unnest(cols = c(data)) %>% 
  dplyr::filter(!is.na(r2)) %>% 
  dplyr::group_by(fav_gene) %>% 
  dplyr::summarize(max = max(r2)) %>% 
  ggplot() +
  geom_histogram(aes(max), binwidth = 0.05, color = "gray", fill = "#02224C") + 
  labs(subtitle = "Distribution of maximum r^2 values for each gene", 
       x = "Maximum r^2 values", 
       y = "Count") +
  theme_ddh()

```

#### Statistics

Rather than setting an arbitrary threshold for the r\^2 value that would be considered a low, medium, or high correlation between two genes, we performed a permutation test on the correlated data. A permutation test involves permuting one or more variables in a data set before performing the test, in order to break any existing relationships and simulate the null hypothesis. In this case, we broke the relationship between gene-gene pairs and the correlation values. We then generated a distribution of null statistics (fake means), along with standard deviations of these sampled data. This strategy identified at which correlation value to draw a threshold of a "significant correlation" for these analyses. We sampled 20,000 r\^2 values from all gene-gene pairs without replacement simulating a virtual Achilles correlation dataset for a single cell. We then repeated this process 1000 times mimicking 1000 discrete cell lines.

This statistical analysis produced the following data:\
**Mean:** `r mean_virtual_achilles`\
**Standard Deviation:** `r sd_virtual_achilles`

Using a standard deviation threshold of `r sd_threshold`, we calculated the boundaries of r\^2 values to be greater than `r round(achilles_upper, 2)` or lower than `r round(achilles_lower, 2)` for negative correlations. Simply stated, gene-gene correlations above or below, respectively, these values were considered strong and used for subsequent analyses. The r\^2 values and corresponding z-score transformations of these values are shown on the tables.

### Comparing To Known Literature

The process of generating a prioritized gene list based on similar patterns to a query gene is an unbiased approach to map genes into functional pathways. To find novel genes in established pathways, this approach requires identifying "novel" or "unexpected" genes in the gene list. However, what may seem unexpected to one researcher might be obvious or intuitive to another. To remove bias in prioritizing candidate genes for further study and to programatically identify novelty, we generated a **co-publication index**, where every human gene was compared to publication co-incidence with every other human gene in the [PubMed](https://pubmed.ncbi.nlm.nih.gov) database.

PubMed contains 30 million publication records containing article metadata and abstracts. We began by first parsing each of the 30 million abstracts for all gene names and gene aliases in an abstract. Next we were able to generate article level summaries for each gene in each article, and then counted gene-gene co-occurrence in an abstract. Measuring all human gene-gene co-occurrences across all PubMed records allowed us to identify the frequency with which a gene was published with another gene. Unfortunately, gene nomenclature is a mess, with official gene names changing over time, and several genes sharing common aliases. As a keystone example, the protein p38 has been used as a name to describe the genes MAPK14 (NCBI gene id 1432), AHSA1 (NCBI gene id 10598), and AIMP2 (NCBI gene id 7965). The protein p38 associated with MAPK14 is among the most studied and published on genes in the human genome, whereas AHSA1 and AIMP2 are among the least studied. This discrepancy and ambiguity in identifying genes in abstracts necessitated an alternative approach.

Next, we leveraged a PubMed resource from the National Library of Medicine (NLM) called gene2pubmed that links unique NCBI gene ids to a PubMed id. This resource is part of the NLM's Indexing Initiative (IND) is working to automate indexing methods partially or completely manual indexing practices. Using gene2pubmed, we again measured all human gene-gene co-occurrences across all PubMed records. While this method overcomes the challenges associated with gene nomenclature by providing gene ids, it is still limited in its ability to curate genes associated with scientific papers by the same challenges in gene nomenclature.

A new machine learning (ML)-based resource developed by the Computational Biology Branch at the NLM/NCBI called [Pubtator](https://www.ncbi.nlm.nih.gov/research/pubtator/) aims to overcome these challenges by providing automatic annotations of biomedical concepts such as genes and mutations in PubMed abstracts and PMC full-text articles. Using advanced text-mining techniques, Pubtator goes beyond assigning genes to paper by developing a ML model that generates automated annotations for genes/proteins, genetic variants, diseases, chemicals, species and cell lines in a single paper, across all PubMed (30 million) abstracts and the PMC Text Mining subset of (3 million full text) articles.Improved concept identification systems and a new disambiguation module based on deep learning provides best-in-class annotation accuracy. Using these data, we filtered "concept ids" that matched official NCBI gene IDs, and then took the same approach described above to determine the number of times a gene was annotated with scientific paper, and the pairwise count of each gene with each other gene in a single paper, across all papers. Because of the wide range of annotated gene co-occurrences, we also generated a relative index \[(co-occurrence count/max co-occurrence)\*100\] normalized to 100. The co-occurrence count and co-occurrence index provides useful, and unbiased information about the level of prior knowledge for gene-gene relationship identified by the analytic approach detailed above.

Positive correlations of dependency scores are ranked for each gene. Recall that these genes show similar patterns of dependencies in the same cell lines. More simply, the cells that care about `r input_report$content` deletion also care about deletion of these genes, implying a functional relationship. In the Dependency Score Example heatmap schematic above, `r input_report$content` is gene X, and genes with similar patterns would be genes A, B, and C. The genes that show a  similar genetic dependencies as `r input_report$content` and are above `r sd_threshold` standard deviations away from the resampled mean are displayed.  

One data source that can help prioritize genes for study is to compare gene-gene associations to known gene-gene relationships based on previous literature.

{{< include _gene-coessentiality-table.qmd >}}  

### Positive Enrichment
To identify clusters of genes with shared relationships, we performed gene set enrichment analysis. Enrichment analysis is a computational method for inferring knowledge about a target gene set by comparing it to annotated gene sets representing prior biological knowledge. Enrichment analysis determines whether an input set of genes significantly overlaps with annotated gene sets. For each gene in our matrix, we determined the number of genes that were greater than or less than `r sd_threshold` standard deviations away from the permuted mean. This target gene list was then queried across a [broad range of curated data](https://amp.pharm.mssm.edu/Enrichr/#stats). By leveraging the [Enrichr](https://amp.pharm.mssm.edu/Enrichr/) resource from the [Ma'ayan Laboratory](http://labs.icahn.mssm.edu/maayanlab/), we determined the top ranked pathways, processes, drugs, cell lines, tissues, or diseases, and ranked by p-value. In this setting, the p-value is computed using a standard statistical method used by most enrichment analysis tools: Fisher's exact test or the hypergeometric test. This is a binomial proportion test that assumes a binomial distribution and independence for probability of any gene belonging to any set. [See here for more information about how Enrichr computes its associations](https://amp.pharm.mssm.edu/Enrichr/help#background).  

These `r paste0(length(dep_top[1]))` genes were queried for gene set enrichment, and the gene sets and pathways with the strongest statistical significance are shown. Simply stated, these are the pathways that best represent the list of genes that share similar genetic dependencies, and suggest that the query gene is part of these pathways.  
  
{{< include _gene-coessentiality-positive.qmd >}}  
  
### Negative Correlations
Like the analysis for genes that share similar patterns, this analysis can be used to find genes that share distinctly dissimilar patterns; that is, genes that have an inverse correlation of dependences. Simply stated, the cells that care about `r input_report$content` deletion *do not* care about deletion of these genes, implying an inverse or opposing relationship. In the Dependency Score Example heatmap schematic above, `r input_report$content` is gene X, and genes with dissimilar patterns would be genes D, E, and F. The genes that show inverse genetic dependencies to `r input_report$content` and are below `r sd_threshold` standard deviations away from the resampled mean are:   

{{< include _gene-coessentiality-inverse-table.qmd >}}  

### Negative Enrichment
These `r paste0(length(dep_bottom[1]))` genes were also queried for gene set enrichment, and the gene sets and pathways with the strongest statistical significance are shown. Simply stated, these are the pathways that best represent the list of genes that have inverse genetic dependencies. 

{{< include _gene-coessentiality-negative.qmd >}}  

How to interpret these genes and pathways is more variable than the positively correlated genes and pathways. In some cases, a negative regulator of a gene has a negative correlation with that gene. In other cases, opposing *pathways* are shown, contrasting two opposing biological pathways.    

## Co-dependency Graph {#sec-codependency-graph}  
As an alternative approach to prioritize further study of novel functional mappings, an interactive network graph of gene-gene relationships can be built. A single gene query results in a list of top and bottom associated genes based on patterns of gene dependency scores. The top 10 and bottom 10 genes are then queried for each of their top and bottom correlated genes. These resulting 400 gene pairs (20 genes \* 20 genes) are then used to build a network graph, which can reveal if a top associated gene with the query gene, also has the query gene in its top (or bottom) 10. In this way, strong functional networks can be identified and prioritized for further study.  
  
Identifying genes that share similar patterns of dependency to a queried unknown gene generates strong hypotheses about new functional annotations and maps to new pathways. However, the strength of the hypothesis cannot be fully inferred from single gene list. If a new gene is associated with the queried gene, then you might infer a functional relationship. However, if you inspect the top 10 genes with the queried gene, then inspect the top 10 genes of each of those, building a functional network graph of the top related genes might reveal a stronger association of the new gene with your queried gene *and* its top ranked genes.  
  
{{< include _gene-coessentiality-graph.qmd >}}  
  
## Correlated Drugs {#sec-correlated-drugs}
{{< include _gene-coessentiality-drugs.qmd >}}  
